.PHONY: clean clean-test clean-pyc clean-build docs help
.DEFAULT_GOAL := help

include .env

APP_DIR=quizz/
TESTS_DIR=tests/

VENV_DIR ?= venv
ifeq ($(wildcard ${VENV_DIR}),)
	VENV_BIN=
else
	VENV_BIN=./${VENV_DIR}/bin/
endif

define PRINT_HELP_PYSCRIPT
import re, sys

for line in sys.stdin:
	match = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)
	if match:
		target, help = match.groups()
		print("%-20s %s" % (target, help))
endef
export PRINT_HELP_PYSCRIPT

help:
	@python -c "$$PRINT_HELP_PYSCRIPT" < $(MAKEFILE_LIST)

clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	rm -fr build/
	rm -fr dist/
	rm -fr .eggs/
	find . -name '*.egg-info' -exec rm -fr {} +
	find . -name '*.egg' -exec rm -f {} +

clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +
	rm -rf .mypy_cache
	rm -f .dmypy.json

clean-test: ## remove test and coverage artifacts
	rm -fr .tox/
	rm -f .coverage
	rm -fr htmlcov/
	rm -fr .pytest_cache

test: ## run tests quickly with the default Python
	pytest
	pytest --dead-fixtures

pip-requirements: ## compile requirements with pip-compile
	${VENV_BIN}pip-compile -U 2>&1 >/dev/null
	${VENV_BIN}pip-compile -U requirements*.in 2>&1 >/dev/null
	${VENV_BIN}pip-sync requirements*.txt

lint: ## check style with pylint
	${VENV_BIN}isort -rc ${APP_DIR} ${TESTS_DIR}
	${VENV_BIN}black ${APP_DIR} ${TESTS_DIR}
	${VENV_BIN}flake8 ${APP_DIR}
	${VENV_BIN}mypy ${APP_DIR}

test-all: ## run tests on every Python version with tox
	${VENV_BIN}tox

coverage: ## check code coverage quickly with the default Python
	${VENV_BIN}coverage run --source app -m pytest
	${VENV_BIN}coverage report -m
	${VENV_BIN}coverage html

################################################################################

# init:  build run
# 	docker-compose exec web quizz db upgrade
# 	docker-compose exec web quizz init
# 	@echo "Init done, containers running"

# build:
# 	docker-compose build

# run:
# 	docker-compose up -d

# db-migrate:
# 	docker-compose exec web quizz db migrate

# db-upgrade:
# 	docker-compose exec web quizz db upgrade

# test:
# 	docker-compose run -v $(PWD)/tests:/code/tests:ro web tox -e test

# tox:
# 	docker-compose run -v $(PWD)/tests:/code/tests:ro web tox -e py38

# lint:
# 	docker-compose run web tox -e lint
